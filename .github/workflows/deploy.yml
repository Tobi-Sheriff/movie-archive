name: Deploy to Server

on:
  push:
    branches:
      - main
      - 'feature/code-cleanup'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DB_USER: ${{ secrets.POSTGRES_USER }}
      DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DB_NAME: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            whoami
            echo "Deploying on $(whoami)@${{ secrets.SERVER_IP }}"

            # 1. Navigate to the project directory
            cd ~/sheriff_project/movie-archive
            pwd

            # 2. Pull the latest code
            git pull origin main

            # 3. Create .env file from secrets
            echo "DB_USER=${{ env.DB_USER }}" > .env
            echo "DB_PASSWORD=${{ env.DB_PASSWORD }}" >> .env
            echo "DB_NAME=${{ env.DB_NAME }}" >> .env
            echo "DB_HOST=localhost" >> .env
            echo "DB_PORT=5432" >> .env
            echo "STORE_TYPE=db" >> .env
            # cat .env

            # 4. Install dependencies, using ci for faster installation
            npm ci
            npm audit

            # Install PostgreSQL (if not already installed)
            sudo apt-get update
            sudo apt-get install postgresql postgresql-contrib

            # Check PostgreSQL status and start if necessary
            if ! pg_isready -q; then
              sudo systemctl start postgresql
            fi

            # Create user, database, and password
            sudo -u -s postgres psql
            sudo -u postgres createuser --superuser ${{ env.DB_USER }}
            sudo -u postgres createdb ${{ env.DB_NAME }}
            sudo -u postgres psql -c "ALTER ROLE myuser WITH PASSWORD ${{ env.DB_PASSWORD }};"
            \q

            # Grant privileges (optional)
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE mydb TO myuser;"

            # 5. Run migrations if needed
            npx sequelize-cli db:migrate

            # # 6. Restart your Node.js application (assuming using PM2 or Node directly)
            # pm2 restart index.js || pm2 start index.js --name movie-archive

            # # Optional: Configure PostgreSQL to start on boot (run once on server)
            # sudo systemctl enable postgresql